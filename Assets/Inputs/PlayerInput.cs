//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Inputs/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.Inputs
{
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Tank"",
            ""id"": ""7d4c88e9-e658-4498-b804-9771d8379623"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""039a4d27-4cfe-4c0c-a068-61e1af318ca8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftEngine"",
                    ""type"": ""Button"",
                    ""id"": ""cfadc794-9dd7-40d7-91c7-7dc231028db1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightEngine"",
                    ""type"": ""Button"",
                    ""id"": ""fed43268-a2ef-4801-98fa-fb8229f80000"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e5c17e5b-3f1b-41b4-9eef-3d57ae14d740"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30785127-62d8-4168-9216-7b857f4bcd7b"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec799a2d-b911-478b-9124-f148c1d20293"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8f1446f-fd6d-4760-b4bc-24e12fb9e04d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LeftEngine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79b59708-08f5-4497-af18-7bbe6958e1ff"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftEngine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d82f0b4a-3fc0-4f8b-a340-5068057b6bbc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RightEngine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18a9abcf-9930-4e3e-9ab9-c110b9fb5193"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightEngine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ea28fd7-1819-4e83-b7c2-2041bf771054"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cheats"",
            ""id"": ""32fefb3c-1add-4b5c-abea-fc08ac631d1b"",
            ""actions"": [
                {
                    ""name"": ""NoClipToggle"",
                    ""type"": ""Button"",
                    ""id"": ""71581156-fdc3-4805-b634-06c51e3f52e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NoClipMovement"",
                    ""type"": ""Value"",
                    ""id"": ""c9d70df0-ce1d-4f25-906f-0cc8c9adf130"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ff48846-ae5b-4092-9d7d-a290f826d714"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""NoClipToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f713e803-8124-46e1-82c3-77afca3dd975"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""NoClipMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Tank
            m_Tank = asset.FindActionMap("Tank", throwIfNotFound: true);
            m_Tank_Shoot = m_Tank.FindAction("Shoot", throwIfNotFound: true);
            m_Tank_LeftEngine = m_Tank.FindAction("LeftEngine", throwIfNotFound: true);
            m_Tank_RightEngine = m_Tank.FindAction("RightEngine", throwIfNotFound: true);
            m_Tank_Aim = m_Tank.FindAction("Aim", throwIfNotFound: true);
            // Cheats
            m_Cheats = asset.FindActionMap("Cheats", throwIfNotFound: true);
            m_Cheats_NoClipToggle = m_Cheats.FindAction("NoClipToggle", throwIfNotFound: true);
            m_Cheats_NoClipMovement = m_Cheats.FindAction("NoClipMovement", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Tank
        private readonly InputActionMap m_Tank;
        private List<ITankActions> m_TankActionsCallbackInterfaces = new List<ITankActions>();
        private readonly InputAction m_Tank_Shoot;
        private readonly InputAction m_Tank_LeftEngine;
        private readonly InputAction m_Tank_RightEngine;
        private readonly InputAction m_Tank_Aim;
        public struct TankActions
        {
            private @PlayerInput m_Wrapper;
            public TankActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Shoot => m_Wrapper.m_Tank_Shoot;
            public InputAction @LeftEngine => m_Wrapper.m_Tank_LeftEngine;
            public InputAction @RightEngine => m_Wrapper.m_Tank_RightEngine;
            public InputAction @Aim => m_Wrapper.m_Tank_Aim;
            public InputActionMap Get() { return m_Wrapper.m_Tank; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TankActions set) { return set.Get(); }
            public void AddCallbacks(ITankActions instance)
            {
                if (instance == null || m_Wrapper.m_TankActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TankActionsCallbackInterfaces.Add(instance);
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @LeftEngine.started += instance.OnLeftEngine;
                @LeftEngine.performed += instance.OnLeftEngine;
                @LeftEngine.canceled += instance.OnLeftEngine;
                @RightEngine.started += instance.OnRightEngine;
                @RightEngine.performed += instance.OnRightEngine;
                @RightEngine.canceled += instance.OnRightEngine;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }

            private void UnregisterCallbacks(ITankActions instance)
            {
                @Shoot.started -= instance.OnShoot;
                @Shoot.performed -= instance.OnShoot;
                @Shoot.canceled -= instance.OnShoot;
                @LeftEngine.started -= instance.OnLeftEngine;
                @LeftEngine.performed -= instance.OnLeftEngine;
                @LeftEngine.canceled -= instance.OnLeftEngine;
                @RightEngine.started -= instance.OnRightEngine;
                @RightEngine.performed -= instance.OnRightEngine;
                @RightEngine.canceled -= instance.OnRightEngine;
                @Aim.started -= instance.OnAim;
                @Aim.performed -= instance.OnAim;
                @Aim.canceled -= instance.OnAim;
            }

            public void RemoveCallbacks(ITankActions instance)
            {
                if (m_Wrapper.m_TankActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITankActions instance)
            {
                foreach (var item in m_Wrapper.m_TankActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TankActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TankActions @Tank => new TankActions(this);

        // Cheats
        private readonly InputActionMap m_Cheats;
        private List<ICheatsActions> m_CheatsActionsCallbackInterfaces = new List<ICheatsActions>();
        private readonly InputAction m_Cheats_NoClipToggle;
        private readonly InputAction m_Cheats_NoClipMovement;
        public struct CheatsActions
        {
            private @PlayerInput m_Wrapper;
            public CheatsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @NoClipToggle => m_Wrapper.m_Cheats_NoClipToggle;
            public InputAction @NoClipMovement => m_Wrapper.m_Cheats_NoClipMovement;
            public InputActionMap Get() { return m_Wrapper.m_Cheats; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CheatsActions set) { return set.Get(); }
            public void AddCallbacks(ICheatsActions instance)
            {
                if (instance == null || m_Wrapper.m_CheatsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CheatsActionsCallbackInterfaces.Add(instance);
                @NoClipToggle.started += instance.OnNoClipToggle;
                @NoClipToggle.performed += instance.OnNoClipToggle;
                @NoClipToggle.canceled += instance.OnNoClipToggle;
                @NoClipMovement.started += instance.OnNoClipMovement;
                @NoClipMovement.performed += instance.OnNoClipMovement;
                @NoClipMovement.canceled += instance.OnNoClipMovement;
            }

            private void UnregisterCallbacks(ICheatsActions instance)
            {
                @NoClipToggle.started -= instance.OnNoClipToggle;
                @NoClipToggle.performed -= instance.OnNoClipToggle;
                @NoClipToggle.canceled -= instance.OnNoClipToggle;
                @NoClipMovement.started -= instance.OnNoClipMovement;
                @NoClipMovement.performed -= instance.OnNoClipMovement;
                @NoClipMovement.canceled -= instance.OnNoClipMovement;
            }

            public void RemoveCallbacks(ICheatsActions instance)
            {
                if (m_Wrapper.m_CheatsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICheatsActions instance)
            {
                foreach (var item in m_Wrapper.m_CheatsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CheatsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CheatsActions @Cheats => new CheatsActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface ITankActions
        {
            void OnShoot(InputAction.CallbackContext context);
            void OnLeftEngine(InputAction.CallbackContext context);
            void OnRightEngine(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
        }
        public interface ICheatsActions
        {
            void OnNoClipToggle(InputAction.CallbackContext context);
            void OnNoClipMovement(InputAction.CallbackContext context);
        }
    }
}
